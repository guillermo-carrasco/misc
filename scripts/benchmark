#!/usr/bin/env python

import argparse
import datetime
import json
import logging
import os
import time

from collections import OrderedDict
from subprocess import check_call

# Init logging
def init_logging(log_file=None):
    """Initialize logging parameters"""

    # Get root logger
    log = logging.getLogger()
    log.name = "Benchmark"

    # Set level
    log.setLevel(logging.INFO)

    # Add a console logger
    stream_handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    stream_handler.setFormatter(formatter)
    log.addHandler(stream_handler)

    # Add a file logger if specifyed
    if log_file:
        file_handle = logging.FileHandler(log_file)
        file_handle.setLevel(logging.INFO)
        file_handle.setFormatter(formatter)
        log.addHandler(file_handle)


def time_command(command, suffix=''):
    """Executes command and returns the elapsed time"""
    _command = command.split()
    command_name = _command[0]
    if os.path.isabs(command_name):
        command_name = os.path.split(command_name)[1]
    with open("{}{}.out".format(command_name, suffix), 'w') as out, \
            open("{}{}.err".format(command_name, suffix), 'w') as err:
        start_time = time.time()
        check_call(_command, stdout=out, stderr=err)
        return time.time() - start_time


if __name__=='__main__':
    parser = argparse.ArgumentParser(description=("Benchmark an application (wall clock "
                                                  "time only) and generate some stats"))
    parser.add_argument("command", type=str, help="Command to be evaluated")
    parser.add_argument('--log-file', type=str, help="Log file")
    parser.add_argument('--num-executions', '-n', type=int, default=3, help= \
                        "Number of times to execute the command to be benchmarked")
    args = parser.parse_args()

    init_logging(args.log_file)

    logging.info("Benchmarking command: {}".format(args.command))
    res = OrderedDict()
    command_name = args.command.split()[0]
    if os.path.isabs(command_name):
        command_name = os.path.split(command_name)[1]
    for i in range(1, args.num_executions + 1):
        logging.info("Running execution #{}...".format(str(i)))
        res[i] = time_command(args.command, suffix=str(i))
        logging.info("Took {}".format(str(datetime.timedelta(seconds=res[i]))))

    with open('{}_results.json'.format(command_name), 'w') as f:
        json.dump(res, f, indent=4)
    logging.info("Mean elapsed time: {}".format(str(sum(res.values())/len(res))))
